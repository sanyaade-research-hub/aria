/*
MobileRobots Advanced Robotics Interface for Applications (ARIA)
Copyright (C) 2004, 2005 ActivMedia Robotics LLC
Copyright (C) 2006, 2007, 2008, 2009 MobileRobots Inc.
Copyright (C) 2010, 2011 Adept Technology, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; 800-639-9481
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArSick extends ArLMS2xx {
  /* (begin code from javabody_derived typemap) */

  private long swigCPtr;

  /* for internal use by swig only */
  public ArSick(long cPtr, boolean cMemoryOwn) {
    super(AriaJavaJNI.SWIGArSickUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArSick obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /* (end code from javabody_derived typemap) */

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      AriaJavaJNI.delete_ArSick(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public ArSick(long currentBufferSize, long cumulativeBufferSize, String name, boolean addAriaExitCB, boolean isSecondLaser) {
    this(AriaJavaJNI.new_ArSick__SWIG_0(currentBufferSize, cumulativeBufferSize, name, addAriaExitCB, isSecondLaser), true);
  }

  public ArSick(long currentBufferSize, long cumulativeBufferSize, String name, boolean addAriaExitCB) {
    this(AriaJavaJNI.new_ArSick__SWIG_1(currentBufferSize, cumulativeBufferSize, name, addAriaExitCB), true);
  }

  public ArSick(long currentBufferSize, long cumulativeBufferSize, String name) {
    this(AriaJavaJNI.new_ArSick__SWIG_2(currentBufferSize, cumulativeBufferSize, name), true);
  }

  public ArSick(long currentBufferSize, long cumulativeBufferSize) {
    this(AriaJavaJNI.new_ArSick__SWIG_3(currentBufferSize, cumulativeBufferSize), true);
  }

  public ArSick(long currentBufferSize) {
    this(AriaJavaJNI.new_ArSick__SWIG_4(currentBufferSize), true);
  }

  public ArSick() {
    this(AriaJavaJNI.new_ArSick__SWIG_5(), true);
  }

  public boolean tryingToConnect() {
    return AriaJavaJNI.ArSick_tryingToConnect(swigCPtr, this);
  }

  public boolean runOnRobot() {
    return AriaJavaJNI.ArSick_runOnRobot(swigCPtr, this);
  }

  public void configure(boolean useSim, boolean powerControl, boolean laserFlipped, ArSick.BaudRate baud, ArSick.Degrees deg, ArSick.Increment incr) {
    AriaJavaJNI.ArSick_configure__SWIG_0(swigCPtr, this, useSim, powerControl, laserFlipped, baud.swigValue(), deg.swigValue(), incr.swigValue());
  }

  public void configure(boolean useSim, boolean powerControl, boolean laserFlipped, ArSick.BaudRate baud, ArSick.Degrees deg) {
    AriaJavaJNI.ArSick_configure__SWIG_1(swigCPtr, this, useSim, powerControl, laserFlipped, baud.swigValue(), deg.swigValue());
  }

  public void configure(boolean useSim, boolean powerControl, boolean laserFlipped, ArSick.BaudRate baud) {
    AriaJavaJNI.ArSick_configure__SWIG_2(swigCPtr, this, useSim, powerControl, laserFlipped, baud.swigValue());
  }

  public void configure(boolean useSim, boolean powerControl, boolean laserFlipped) {
    AriaJavaJNI.ArSick_configure__SWIG_3(swigCPtr, this, useSim, powerControl, laserFlipped);
  }

  public void configure(boolean useSim, boolean powerControl) {
    AriaJavaJNI.ArSick_configure__SWIG_4(swigCPtr, this, useSim, powerControl);
  }

  public void configure(boolean useSim) {
    AriaJavaJNI.ArSick_configure__SWIG_5(swigCPtr, this, useSim);
  }

  public void configure() {
    AriaJavaJNI.ArSick_configure__SWIG_6(swigCPtr, this);
  }

  public void configureShort(boolean useSim, ArSick.BaudRate baud, ArSick.Degrees deg, ArSick.Increment incr) {
    AriaJavaJNI.ArSick_configureShort__SWIG_0(swigCPtr, this, useSim, baud.swigValue(), deg.swigValue(), incr.swigValue());
  }

  public void configureShort(boolean useSim, ArSick.BaudRate baud, ArSick.Degrees deg) {
    AriaJavaJNI.ArSick_configureShort__SWIG_1(swigCPtr, this, useSim, baud.swigValue(), deg.swigValue());
  }

  public void configureShort(boolean useSim, ArSick.BaudRate baud) {
    AriaJavaJNI.ArSick_configureShort__SWIG_2(swigCPtr, this, useSim, baud.swigValue());
  }

  public void configureShort(boolean useSim) {
    AriaJavaJNI.ArSick_configureShort__SWIG_3(swigCPtr, this, useSim);
  }

  public void configureShort() {
    AriaJavaJNI.ArSick_configureShort__SWIG_4(swigCPtr, this);
  }

  public void setRangeInformation(ArSick.Bits bits, ArSick.Units units) {
    AriaJavaJNI.ArSick_setRangeInformation__SWIG_0(swigCPtr, this, bits.swigValue(), units.swigValue());
  }

  public void setRangeInformation(ArSick.Bits bits) {
    AriaJavaJNI.ArSick_setRangeInformation__SWIG_1(swigCPtr, this, bits.swigValue());
  }

  public void setRangeInformation() {
    AriaJavaJNI.ArSick_setRangeInformation__SWIG_2(swigCPtr, this);
  }

  public boolean isUsingSim() {
    return AriaJavaJNI.ArSick_isUsingSim(swigCPtr, this);
  }

  public boolean isControllingPower() {
    return AriaJavaJNI.ArSick_isControllingPower(swigCPtr, this);
  }

  public boolean isLaserFlipped() {
    return AriaJavaJNI.ArSick_isLaserFlipped(swigCPtr, this);
  }

  public ArSick.Degrees getDegrees() {
    return ArSick.Degrees.swigToEnum(AriaJavaJNI.ArSick_getDegrees(swigCPtr, this));
  }

  public ArSick.Bits getBits() {
    return ArSick.Bits.swigToEnum(AriaJavaJNI.ArSick_getBits(swigCPtr, this));
  }

  public ArSick.Units getUnits() {
    return ArSick.Units.swigToEnum(AriaJavaJNI.ArSick_getUnits(swigCPtr, this));
  }

  public void setIsUsingSim(boolean usingSim) {
    AriaJavaJNI.ArSick_setIsUsingSim(swigCPtr, this, usingSim);
  }

  public void setIsControllingPower(boolean controlPower) {
    AriaJavaJNI.ArSick_setIsControllingPower(swigCPtr, this, controlPower);
  }

  public void setIsLaserFlipped(boolean laserFlipped) {
    AriaJavaJNI.ArSick_setIsLaserFlipped(swigCPtr, this, laserFlipped);
  }

  public void setFilterCumulativeCleanDist(double dist) {
    AriaJavaJNI.ArSick_setFilterCumulativeCleanDist(swigCPtr, this, dist);
  }

  public double getFilterCumulativeCleanDist() {
    return AriaJavaJNI.ArSick_getFilterCumulativeCleanDist(swigCPtr, this);
  }

  public void setFilterCleanCumulativeInterval(int milliSeconds) {
    AriaJavaJNI.ArSick_setFilterCleanCumulativeInterval(swigCPtr, this, milliSeconds);
  }

  public int getFilterCleanCumulativeInterval() {
    return AriaJavaJNI.ArSick_getFilterCleanCumulativeInterval(swigCPtr, this);
  }

  public void setFilterCumulativeNearDist(double dist) {
    AriaJavaJNI.ArSick_setFilterCumulativeNearDist(swigCPtr, this, dist);
  }

  public double getFilterCumulativeNearDist() {
    return AriaJavaJNI.ArSick_getFilterCumulativeNearDist(swigCPtr, this);
  }

  public void setFilterNearDist(double dist) {
    AriaJavaJNI.ArSick_setFilterNearDist(swigCPtr, this, dist);
  }

  public double getFilterNearDist() {
    return AriaJavaJNI.ArSick_getFilterNearDist(swigCPtr, this);
  }

  public void setFilterCumulativeInsertMaxDist(double dist) {
    AriaJavaJNI.ArSick_setFilterCumulativeInsertMaxDist(swigCPtr, this, dist);
  }

  public double getFilterCumulativeInsertMaxDist() {
    return AriaJavaJNI.ArSick_getFilterCumulativeInsertMaxDist(swigCPtr, this);
  }

  public long getMinRange() {
    return AriaJavaJNI.ArSick_getMinRange(swigCPtr, this);
  }

  public void setMinRange(long minRange) {
    AriaJavaJNI.ArSick_setMinRange(swigCPtr, this, minRange);
  }

  public void setFilterCumulativeMaxDist(double dist) {
    AriaJavaJNI.ArSick_setFilterCumulativeMaxDist(swigCPtr, this, dist);
  }

  public double getFilterCumulativeMaxDist() {
    return AriaJavaJNI.ArSick_getFilterCumulativeMaxDist(swigCPtr, this);
  }

  public void setFilterCumulativeMaxAge(int seconds) {
    AriaJavaJNI.ArSick_setFilterCumulativeMaxAge(swigCPtr, this, seconds);
  }

  public int getFilterCumulativeMaxAge() {
    return AriaJavaJNI.ArSick_getFilterCumulativeMaxAge(swigCPtr, this);
  }

  public int getSickPacCount() {
    return AriaJavaJNI.ArSick_getSickPacCount(swigCPtr, this);
  }

  public void addConnectCB(ArFunctor functor, ArListPos.Pos position) {
    AriaJavaJNI.ArSick_addConnectCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addConnectCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_addConnectCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remConnectCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_remConnectCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addFailedConnectCB(ArFunctor functor, ArListPos.Pos position) {
    AriaJavaJNI.ArSick_addFailedConnectCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addFailedConnectCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_addFailedConnectCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remFailedConnectCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_remFailedConnectCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addDisconnectNormallyCB(ArFunctor functor, ArListPos.Pos position) {
    AriaJavaJNI.ArSick_addDisconnectNormallyCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addDisconnectNormallyCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_addDisconnectNormallyCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remDisconnectNormallyCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_remDisconnectNormallyCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addDisconnectOnErrorCB(ArFunctor functor, ArListPos.Pos position) {
    AriaJavaJNI.ArSick_addDisconnectOnErrorCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addDisconnectOnErrorCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_addDisconnectOnErrorCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remDisconnectOnErrorCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_remDisconnectOnErrorCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addDataCB(ArFunctor functor, ArListPos.Pos position) {
    AriaJavaJNI.ArSick_addDataCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addDataCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_addDataCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remDataCB(ArFunctor functor) {
    AriaJavaJNI.ArSick_remDataCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void setConnectionTimeoutTime(int secs) {
    AriaJavaJNI.ArSick_setConnectionTimeoutTime(swigCPtr, this, secs);
  }

  public int getConnectionTimeoutTime() {
    return AriaJavaJNI.ArSick_getConnectionTimeoutTime(swigCPtr, this);
  }

  public final static class BaudRate {
    public final static BaudRate BAUD9600 = new BaudRate("BAUD9600");
    public final static BaudRate BAUD19200 = new BaudRate("BAUD19200");
    public final static BaudRate BAUD38400 = new BaudRate("BAUD38400");
    public final static BaudRate BAUD_INVALID = new BaudRate("BAUD_INVALID");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static BaudRate swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + BaudRate.class + " with value " + swigValue);
    }

    private BaudRate(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private BaudRate(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private BaudRate(String swigName, BaudRate swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static BaudRate[] swigValues = { BAUD9600, BAUD19200, BAUD38400, BAUD_INVALID };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Degrees {
    public final static Degrees DEGREES180 = new Degrees("DEGREES180");
    public final static Degrees DEGREES100 = new Degrees("DEGREES100");
    public final static Degrees DEGREES_INVALID = new Degrees("DEGREES_INVALID");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Degrees swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Degrees.class + " with value " + swigValue);
    }

    private Degrees(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Degrees(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Degrees(String swigName, Degrees swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Degrees[] swigValues = { DEGREES180, DEGREES100, DEGREES_INVALID };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Increment {
    public final static Increment INCREMENT_ONE = new Increment("INCREMENT_ONE");
    public final static Increment INCREMENT_HALF = new Increment("INCREMENT_HALF");
    public final static Increment INCREMENT_INVALID = new Increment("INCREMENT_INVALID");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Increment swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Increment.class + " with value " + swigValue);
    }

    private Increment(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Increment(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Increment(String swigName, Increment swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Increment[] swigValues = { INCREMENT_ONE, INCREMENT_HALF, INCREMENT_INVALID };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Units {
    public final static Units UNITS_1MM = new Units("UNITS_1MM");
    public final static Units UNITS_1CM = new Units("UNITS_1CM");
    public final static Units UNITS_10CM = new Units("UNITS_10CM");
    public final static Units UNITS_INVALID = new Units("UNITS_INVALID");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Units swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Units.class + " with value " + swigValue);
    }

    private Units(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Units(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Units(String swigName, Units swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Units[] swigValues = { UNITS_1MM, UNITS_1CM, UNITS_10CM, UNITS_INVALID };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Bits {
    public final static Bits BITS_1REFLECTOR = new Bits("BITS_1REFLECTOR");
    public final static Bits BITS_2REFLECTOR = new Bits("BITS_2REFLECTOR");
    public final static Bits BITS_3REFLECTOR = new Bits("BITS_3REFLECTOR");
    public final static Bits BITS_INVALID = new Bits("BITS_INVALID");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Bits swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Bits.class + " with value " + swigValue);
    }

    private Bits(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Bits(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Bits(String swigName, Bits swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Bits[] swigValues = { BITS_1REFLECTOR, BITS_2REFLECTOR, BITS_3REFLECTOR, BITS_INVALID };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
